# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais

# SO"L"ID
# S - Single Responsibility Principle (Princ√≠pio da Responsabilidade √önica):
# Cada classe deve ter uma √∫nica responsabilidade ou motivo para mudar. Isso 
# significa que uma classe deve fazer apenas uma coisa e fazer bem.

# O - Open/Closed Principle (Princ√≠pio Aberto/Fechado):
# As classes devem estar abertas para extens√£o, mas fechadas para modifica√ß√£o. 
# Ou seja, voc√™ deve poder adicionar novas funcionalidades sem alterar o c√≥digo existente.

# L - Liskov Substitution Principle (Princ√≠pio da Substitui√ß√£o de Liskov):
# Objetos de uma classe derivada devem poder substituir objetos da classe base 
# sem alterar o comportamento do programa. Isso garante que a heran√ßa seja usada corretamente.

# I - Interface Segregation Principle (Princ√≠pio da Segrega√ß√£o de Interfaces):
# Muitas interfaces espec√≠ficas s√£o melhores do que uma √∫nica interface geral. 
# Isso significa que os clientes n√£o devem ser for√ßados a depender de interfaces que n√£o utilizam.

# D - Dependency Inversion Principle (Princ√≠pio da Invers√£o de Depend√™ncia):
# M√≥dulos de alto n√≠vel n√£o devem depender de m√≥dulos de baixo n√≠vel. 
# Ambos devem depender de abstra√ß√µes. Al√©m disso, abstra√ß√µes n√£o devem depender de detalhes; 
# detalhes devem depender de abstra√ß√µes.

# POLIMORFISMO -------------------------------------------

# Classe Log (superclasse)

# classes derivadas de uma mesma superclasse
# class LogFileMixin(Log): 
    # def _log(self, msg): # m√©todos iguais (com mesma assinatura)
    # ...

# class LogPrintMixin(Log):
    # def _log(self, msg):
    # ... # mas comportamentos diferentes.

# ---------------------------------------------------------

# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.

# Onde voc√™ usar Log, qualquer subclasse da superclasse deve substitu√≠-la
# sem interferir na funcionalidade da aplica√ß√£o

# ---------------------------------------------------------
# Sobrecarga de m√©todos (overload)  üêç = ‚ùå (Python n√£o suporta)
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
# Sobrescrever o m√©todo da subclasse na superclasse
from abc import ABC, abstractmethod

class Notificacao:
    def __init__(self, mensagem) -> None: #m√©todo retorna None
        self.mensagem = mensagem

    #classes abstratas n√£o podem ser estanciadas at√© que o m√©todo seja concreto
    @abstractmethod 
    def enviar(self) -> bool: ... # informar o tipo de retorno aos outros desenvolvedores

# class NotificacaoEmail(Notificacao):
    # def enviar(self): #como foi determinado que enviar retorna bool
                        #como n√£o houve esse retorno ent√£o ficou None
        # print('Enviando e-mail: ', self.mensagem)

class NotificacaoEmail(Notificacao):
    def enviar(self) -> bool: 
        print('Enviando e-mail: ', self.mensagem)
        return True # Foi enviada

# class NotificacaoSMS(Notificacao):
    # def enviar(self): #None
        # print('Enviando SMS: ', self.mensagem)

class NotificacaoSMS(Notificacao):
    def enviar(self) -> bool: #None
        print('Enviando SMS: ', self.mensagem)
        return False # N√£o foi enviada

# POLIMORFISMO
def notificar(notificacao: Notificacao): #puxa todos os m√©todos da classe determinada
                                         #o objeto notificacao √© polimorfico, muda sem quebrar a app
    notifica√ß√£o_enviada = notificacao.enviar() #verifica se a notifica√ß√£o foi enviada

    if notifica√ß√£o_enviada:
        print('Notifica√ß√£o enviada')

    else:
        print('Notifica√ß√£o N√ÉO enviada') #sendo None o retorno de enviar
                                         #sempre retorna o else

notificacao_email = NotificacaoEmail('Testando e-mail')
notificar(notificacao_email)

notificacao_sms = NotificacaoSMS('Testando SMS')
notificar(notificacao_sms)

n = NotificacaoSMS('Testando notifica√ß√£o')
n. enviar()